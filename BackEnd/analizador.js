/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[5,12,22,64,65,66,67,68],$V8=[1,27],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,31],$Vd=[2,12,14,17,27],$Ve=[1,49],$Vf=[1,40],$Vg=[1,39],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,74],$Vx=[1,73],$Vy=[14,25],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[14,15,23,25,28,69,70,71,72,73,74,75,76,77,78,79,80,81,82,94],$VP=[1,104],$VQ=[2,5,12,13,19,22,36,37,39,43,44,49,55,57,60,61,64,65,66,67,68,70,83,84,85,86,87,88,89,90,102,103,104,105,106,107,108,109,110],$VR=[14,15,23,25,28,81,82,94],$VS=[1,156],$VT=[14,25,28],$VU=[14,15,23,25,28,69,70,75,76,77,78,79,80,81,82,94],$VV=[14,15,23,25,28,69,70,71,72,74,75,76,77,78,79,80,81,82,94],$VW=[14,15,23,25,28,75,76,77,78,79,80,81,82,94],$VX=[2,5,12,19,22,36,37,39,43,44,49,55,57,60,61,64,65,66,67,68,102,103],$VY=[1,194],$VZ=[1,195],$V_=[1,201],$V$=[1,202],$V01=[1,203],$V11=[1,211],$V21=[1,212],$V31=[1,213],$V41=[1,209],$V51=[1,210],$V61=[1,204],$V71=[1,205],$V81=[2,12,19,36,37,39,43,44,49,55,57,60,61,64,65,66,67,68,102,103],$V91=[1,305],$Va1=[19,60,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"ENTCERO":6,"FUNCIONBODY":7,"METODOBODY":8,"RUNBODY":9,"DEC_VAR":10,"DEC_VECT":11,"IDENTIFICADOR":12,"PARENTESIS_ABRE":13,"PARENTESIS_CIERRA":14,"DOSPUNTS":15,"TIPO":16,"LlaveAbre":17,"INSTRUCCION":18,"LlaveCierra":19,"LISTAPARAMETROS":20,"TK_VOID":21,"TK_RUN":22,"TK_PYC":23,"LISTAVALORES":24,"COMA":25,"PARAMETROS":26,"COR_ABRE":27,"COR_CIERRA":28,"INSCERO":29,"SENTENCIACONTROL":30,"SENTENCIACICLO":31,"SENTENCIATRANSFERENCIA":32,"LLAMADA":33,"FPRINTLN":34,"FPRINT":35,"TK_BREAK":36,"TK_RETURN":37,"EXPRESION":38,"TK_CONTINUE":39,"WHILE":40,"FOR":41,"DOWHILE":42,"TK_WHILE":43,"TK_FOR":44,"ACTUALIZACION":45,"IGUAL":46,"INCREMENTO":47,"DECREMENTO":48,"TK_DO":49,"CONTROLIF":50,"SWITCH":51,"IF":52,"IFELSE":53,"ELSEIF":54,"TK_IF":55,"TK_ELSE":56,"TK_SWITCH":57,"CASESLIST":58,"DEFAULT":59,"TK_CASE":60,"TK_DEFAULT":61,"NEW":62,"TIPODATO":63,"STRING":64,"INTEGER":65,"DOUBLE":66,"CHAR":67,"BOOLEAN":68,"OP_SUMA":69,"OP_MENOS":70,"OP_MULTIPLICACION":71,"OP_DIVISION":72,"OP_EXPONENTE":73,"OP_MODULO":74,"IGUALIGUAL":75,"DIFERENTEA":76,"MENOR":77,"MENORIGUAL":78,"MAYOR":79,"MAYORIGUAL":80,"OR":81,"AND":82,"NOT":83,"CADENA":84,"CARACTER":85,"TRUE":86,"FALSE":87,"ENTERO":88,"DECI":89,"GETVALUE":90,"CASTEO":91,"TERNARIO":92,"FUNCIONESRESERVADAS":93,"OP_TERNARIO":94,"FTOLOWER":95,"FTOUPPER":96,"FLENGTH":97,"FROUND":98,"FTYPEOF":99,"FTOSTRING":100,"FTOCHARARRAY":101,"PRINTLN":102,"PRINT":103,"TK_TOLOWER":104,"TK_TOUPPER":105,"TK_LENGTH":106,"TK_ROUND":107,"TK_TYPEOF":108,"TK_TOSTRING":109,"TK_TOCHARARRAY":110,"VALORES":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"IDENTIFICADOR",13:"PARENTESIS_ABRE",14:"PARENTESIS_CIERRA",15:"DOSPUNTS",17:"LlaveAbre",19:"LlaveCierra",21:"TK_VOID",22:"TK_RUN",23:"TK_PYC",25:"COMA",27:"COR_ABRE",28:"COR_CIERRA",36:"TK_BREAK",37:"TK_RETURN",39:"TK_CONTINUE",43:"TK_WHILE",44:"TK_FOR",46:"IGUAL",47:"INCREMENTO",48:"DECREMENTO",49:"TK_DO",55:"TK_IF",56:"TK_ELSE",57:"TK_SWITCH",60:"TK_CASE",61:"TK_DEFAULT",62:"NEW",64:"STRING",65:"INTEGER",66:"DOUBLE",67:"CHAR",68:"BOOLEAN",69:"OP_SUMA",70:"OP_MENOS",71:"OP_MULTIPLICACION",72:"OP_DIVISION",73:"OP_EXPONENTE",74:"OP_MODULO",75:"IGUALIGUAL",76:"DIFERENTEA",77:"MENOR",78:"MENORIGUAL",79:"MAYOR",80:"MAYORIGUAL",81:"OR",82:"AND",83:"NOT",84:"CADENA",85:"CARACTER",86:"TRUE",87:"FALSE",88:"ENTERO",89:"DECI",90:"GETVALUE",94:"OP_TERNARIO",102:"PRINTLN",103:"PRINT",104:"TK_TOLOWER",105:"TK_TOUPPER",106:"TK_LENGTH",107:"TK_ROUND",108:"TK_TYPEOF",109:"TK_TOSTRING",110:"TK_TOCHARARRAY"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,8],[7,7],[7,9],[7,8],[8,8],[8,7],[8,9],[8,8],[8,3],[9,5],[9,6],[9,3],[20,3],[20,1],[26,4],[26,2],[18,2],[18,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,2],[29,1],[29,1],[29,2],[29,2],[32,2],[32,3],[32,2],[32,2],[31,1],[31,1],[31,1],[40,7],[40,6],[40,3],[41,10],[41,9],[41,3],[45,3],[45,2],[45,2],[42,9],[42,8],[42,3],[30,1],[30,1],[50,1],[50,1],[50,1],[50,3],[52,7],[52,6],[53,11],[53,10],[53,10],[53,9],[54,9],[54,8],[51,8],[51,7],[51,7],[51,3],[58,5],[58,4],[58,4],[58,3],[58,3],[59,3],[59,2],[10,5],[10,3],[10,4],[10,3],[10,3],[10,3],[11,11],[11,9],[11,7],[11,7],[11,5],[16,1],[63,1],[63,1],[63,1],[63,1],[63,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,6],[38,4],[38,1],[38,1],[38,1],[38,1],[38,1],[91,4],[92,5],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[93,1],[34,5],[34,4],[34,3],[35,5],[35,4],[35,3],[95,4],[96,4],[97,4],[98,4],[99,4],[100,4],[101,4],[33,4],[33,3],[24,3],[24,1],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 retorno = { parse: $$[$0-1], errors: errors }; errors = []; return retorno; 
break;
case 2:
 retorno = { parse: null, errors: errors }; errors = []; return retorno; 
break;
case 3: case 26:
 if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
if($$[$0]!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5: case 6: case 7: case 8: case 9: case 28: case 29: case 30: case 31: case 32: case 34: case 35: case 42: case 43: case 44: case 57: case 58: case 59: case 60: case 61: case 125: case 126: case 127: case 128: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 155:
this.$=$$[$0]
break;
case 10:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], null, $$[$0-1], $$[$0-3], this._$.first_line, this._$.first_column+1) 
break;
case 11:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], null, [], $$[$0-2], this._$.first_line, this._$.first_column+1) 
break;
case 12:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-8], $$[$0-6], $$[$0-1], $$[$0-3], this._$.first_line, this._$.first_column+1) 
break;
case 13:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-7], $$[$0-5], [], $$[$0-2], this._$.first_line, this._$.first_column+1) 
break;
case 14:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-7], [], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 15:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], [], [], this._$.first_line, this._$.first_column+1) 
break;
case 16:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-8], $$[$0-6], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 17:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-7], $$[$0-5], [], this._$.first_line, this._$.first_column+1) 
break;
case 18:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de método/Función no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 19:
this.$ = INSTRUCCION.nuevoRun($$[$0-3], null, this._$.first_line, this._$.first_column+1)
break;
case 20:
this.$ = INSTRUCCION.nuevoRun($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1)
break;
case 21:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Llamada de Run no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 22: case 153:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 23: case 154:
this.$=[$$[$0]];
break;
case 24:
this.$ = INSTRUCCION.nuevoParametro($$[$0-2], {vector: $$[$0-3]}, this._$.first_line, this._$.first_column+1)
break;
case 25:
this.$ = INSTRUCCION.nuevoParametro($$[$0], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 27:
 if($$[$0]!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 33: case 106:
this.$=$$[$0-1]
break;
case 36: case 37:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de instrucción no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 38:
 this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line, this._$.first_column+1) 
break;
case 39:
 this.$ = new INSTRUCCION.nuevoReturn($$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 40:
 this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line, this._$.first_column+1) 
break;
case 41:
 this.$ = new INSTRUCCION.nuevoReturn(null, this._$.first_line, this._$.first_column+1) 
break;
case 45:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 46:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-3], [], this._$.first_line,this._$.first_column+1)
break;
case 47:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de ciclo While no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 48:
$$[$0-1].push($$[$0-4]); this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 49:
 this.$ = new INSTRUCCION.nuevoFor($$[$0-6], $$[$0-5], [$$[$0-3]], this._$.first_line,this._$.first_column+1)
break;
case 50:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de ciclo For no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 51:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 52:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },  			tipo: 'SUMA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 53:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
				tipo: 'RESTA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 54:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6], this._$.first_line,this._$.first_column+1)
break;
case 55:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-1], [], this._$.first_line,this._$.first_column+1)
break;
case 56:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de sentencia Do-While no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 62:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de sentencia If no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 63:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 64:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-3], [], this._$.first_line,this._$.first_column+1) 
break;
case 65:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 66:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-7], [], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 67:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-7], $$[$0-4], [], this._$.first_line,this._$.first_column+1) 
break;
case 68:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-6], [], [], this._$.first_line,this._$.first_column+1) 
break;
case 69:
 this.$ = new INSTRUCCION.nuevoElseIf($$[$0-6], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 70:
 this.$ = new INSTRUCCION.nuevoElseIf($$[$0-5], [], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 71:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 72:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line, this._$.first_column+1); 
break;
case 73:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 74:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de sentencia Swtich no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 75:
 $$[$0-4].push(new INSTRUCCION.nuevoCaso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-4]; 
break;
case 76:
 $$[$0-3].push(new INSTRUCCION.nuevoCaso($$[$0-1], [], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-3]; 
break;
case 77:
 this.$ = [new INSTRUCCION.nuevoCaso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)]; 
break;
case 78:
 this.$ = [new INSTRUCCION.nuevoCaso($$[$0-1], [], this._$.first_line, this._$.first_column+1)]; 
break;
case 79:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de caso no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 80:
 this.$ = new INSTRUCCION.nuevoCaso(null, $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 81:
 this.$ = new INSTRUCCION.nuevoCaso(null, [], this._$.first_line, this._$.first_column+1); 
break;
case 82:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 83:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 84:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 85:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
				tipo: 'SUMA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 86:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
				tipo: 'RESTA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 87:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de variable no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 88:
 this.$ = INSTRUCCION.nuevoVector($$[$0-10], $$[$0-4], $$[$0-9], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1) 
break;
case 89:
 this.$ = INSTRUCCION.nuevoVector($$[$0-8], null, $$[$0-7], null, $$[$0-2], null, this._$.first_line, this._$.first_column+1) 
break;
case 90:
 this.$ = INSTRUCCION.modificacionVector($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 91:
 this.$ = INSTRUCCION.nuevoVector($$[$0-6], null, $$[$0-5], null, null, $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 92:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de vector no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 93:
this.$ = $$[$0]
break;
case 94:
this.$ = TIPO_DATO.CADENA
break;
case 95:
this.$ = TIPO_DATO.ENTERO
break;
case 96:
this.$ = TIPO_DATO.DOBLE
break;
case 97:
this.$ = TIPO_DATO.CARACTER
break;
case 98:
this.$ = TIPO_DATO.BOOLEANO
break;
case 99:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 100:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 101:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 102:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 103:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 104:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 105:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 107:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 108:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 109:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 110:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 111:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 112:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 113:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 114:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 115:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 116:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 117:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim().substring(1, $$[$0].length - 1), TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 118: case 119:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.BOOLEANO, this._$.first_line,this._$.first_column+1)
break;
case 120:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
break;
case 121:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.DOBLE, this._$.first_line,this._$.first_column+1)
break;
case 122:
 this.$ = INSTRUCCION.accesoLista($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 123:
 this.$ = INSTRUCCION.accesoVector($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 124:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 129:
 this.$ = new INSTRUCCION.nuevoCasteo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 130:
 this.$ = new INSTRUCCION.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 138:
this.$ = new INSTRUCCION.nuevoImprimirLn($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 139:
this.$ = new INSTRUCCION.nuevoImprimirLn(INSTRUCCION.nuevoValor("", TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1), this._$.first_line,this._$.first_column+1)
break;
case 140:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Llamada a función println no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 141:
this.$ = new INSTRUCCION.nuevoImprimir($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 142:
this.$ = new INSTRUCCION.nuevoImprimir(INSTRUCCION.nuevoValor("", TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1), this._$.first_line,this._$.first_column+1)
break;
case 143:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Llamada a función print no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 144:
this.$ = new INSTRUCCION.toLower($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 145:
this.$ = new INSTRUCCION.toUpper($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 146:
this.$ = new INSTRUCCION.nuevoLength($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 147:
this.$ = new INSTRUCCION.nuevoRound($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 148:
this.$ = new INSTRUCCION.nuevoTypeOf($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 149:
this.$ = new INSTRUCCION.nuevoToString($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 150:
this.$ = new INSTRUCCION.nuevoToCharArray($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 151:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 152:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-2], [], this._$.first_line, this._$.first_column+1)
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:$V0,16:12,22:$V1,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},{1:[3]},{5:[1,19],6:20,7:5,8:6,9:7,10:8,11:9,12:$V0,16:12,22:$V1,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},{5:[1,21]},o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),{2:[1,23],13:[1,22],27:$V8,46:$V9,47:$Va,48:$Vb},{2:[1,29],12:[1,28]},{2:$Vc,12:[1,30],27:[1,32]},o($Vd,[2,93]),o($Vd,[2,94]),o($Vd,[2,95]),o($Vd,[2,96]),o($Vd,[2,97]),o($Vd,[2,98]),{1:[2,1]},o($V7,[2,3]),{1:[2,2]},{14:[1,33],16:36,20:34,26:35,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},{19:[1,37]},{12:$Ve,13:$Vf,33:52,38:38,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{23:[1,68]},{23:[1,69]},{12:$Ve,13:$Vf,33:52,38:70,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{13:[1,71]},{23:[1,72]},{23:$Vw,27:[1,75],46:$Vx},{23:[1,76]},{28:[1,77]},{15:[1,78]},{14:[1,79],25:[1,80]},o($Vy,[2,23]),{12:[1,81]},o($V7,[2,18]),{23:[1,82],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{12:$Ve,13:$Vf,33:52,38:98,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,16:100,33:52,38:99,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:101,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VO,[2,116]),o($VO,[2,117]),o($VO,[2,118]),o($VO,[2,119]),o($VO,[2,120]),o($VO,[2,121]),{13:[1,102]},o($VO,[2,124],{13:$VP,27:[1,103]}),o($VO,[2,125]),o($VO,[2,126]),o($VO,[2,127]),o($VO,[2,128]),o($VO,[2,131]),o($VO,[2,132]),o($VO,[2,133]),o($VO,[2,134]),o($VO,[2,135]),o($VO,[2,136]),o($VO,[2,137]),{13:[1,105]},{13:[1,106]},{13:[1,107]},{13:[1,108]},{13:[1,109]},{13:[1,110]},{13:[1,111]},o($VQ,[2,85]),o($VQ,[2,86]),{28:[1,112],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{12:$Ve,13:$Vf,14:[1,113],24:114,33:52,38:116,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:115},o($V7,[2,21]),{12:$Ve,13:$Vf,33:52,38:117,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VQ,[2,83]),{28:[1,118]},o($VQ,[2,87]),{2:[1,119]},{16:120,21:[1,121],63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},{15:[1,122]},{16:36,26:123,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},o($Vy,[2,25],{27:[1,124]}),o($VQ,[2,84]),{12:$Ve,13:$Vf,33:52,38:125,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:126,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:127,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:128,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:129,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:130,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:131,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:132,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:133,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:134,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:135,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:136,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:137,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:138,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:139,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VO,[2,105]),{14:[1,140],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,141]},o($VR,[2,115],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK}),{12:[1,142]},{12:$Ve,13:$Vf,33:52,38:143,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,14:[1,145],24:144,33:52,38:116,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:115},{12:$Ve,13:$Vf,33:52,38:146,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:147,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:148,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:149,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:150,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:151,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:152,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{46:[1,153]},{23:[1,154]},{14:[1,155],25:$VS},o($VT,[2,154]),o($VT,[2,155],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN}),{23:[1,157],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{46:[1,158]},{23:[1,159]},{17:[1,160]},{17:[1,161]},{16:162,21:[1,163],63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},o($Vy,[2,22]),{28:[1,164]},o($VU,[2,99],{71:$VB,72:$VC,73:$VD,74:$VE}),o($VU,[2,100],{71:$VB,72:$VC,73:$VD,74:$VE}),o($VV,[2,101],{73:$VD}),o($VV,[2,102],{73:$VD}),o($VO,[2,103]),o($VV,[2,104],{73:$VD}),o($VW,[2,107],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($VW,[2,108],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($VW,[2,109],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($VW,[2,110],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($VW,[2,111],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o($VW,[2,112],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE}),o([14,15,23,25,28,81,94],[2,113],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,82:$VM}),o($VR,[2,114],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK}),{15:[1,165],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($VO,[2,106]),{12:$Ve,13:$Vf,33:52,38:166,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{25:[1,167]},{28:[1,168],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,169],25:$VS},o($VO,[2,152]),{14:[1,170],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,171],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,172],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,173],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,174],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,175],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,176],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{12:$Ve,13:$Vf,33:52,38:177,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($V7,[2,19]),{23:[1,178]},{12:$Ve,13:$Vf,33:52,38:116,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:179},o($VQ,[2,82]),{12:$Ve,13:$Vf,27:[1,181],33:52,38:182,62:[1,180],70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VX,[2,92]),{2:$VY,10:186,11:189,12:$VZ,16:12,18:183,19:[1,184],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{2:$VY,10:186,11:189,12:$VZ,16:12,18:214,19:[1,215],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{17:[1,216]},{17:[1,217]},o($Vy,[2,24]),{12:$Ve,13:$Vf,33:52,38:218,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VO,[2,129]),{12:$Ve,13:$Vf,33:52,38:219,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VO,[2,123]),o($VO,[2,151]),o($VO,[2,144]),o($VO,[2,145]),o($VO,[2,146]),o($VO,[2,147]),o($VO,[2,148]),o($VO,[2,149]),o($VO,[2,150]),{23:[1,220],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($V7,[2,20]),o($VT,[2,153]),{16:221,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},{12:$Ve,13:$Vf,24:222,33:52,38:116,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:115},{23:[1,223],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,224],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V7,[2,11]),o($V81,[2,27]),o($V81,[2,28]),o($V81,[2,29]),o($V81,[2,30]),o($V81,[2,31]),o($V81,[2,32]),{23:[1,226]},o($V81,[2,34]),o($V81,[2,35]),{19:[1,228],23:[1,227]},{13:$VP,27:$V8,46:$V9,47:$Va,48:$Vb},o($V81,[2,57]),o($V81,[2,58]),o($V81,[2,42]),o($V81,[2,43]),o($V81,[2,44]),{23:[1,229]},{12:$Ve,13:$Vf,23:[1,231],33:52,38:230,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{23:[1,232]},{2:[1,234],13:[1,233]},{2:[1,236],13:[1,235]},o($V81,[2,59]),o($V81,[2,60]),o($V81,[2,61]),{2:[1,237],13:[1,238]},{2:[1,240],13:[1,239]},{2:[1,242],13:[1,241]},{2:[1,244],13:[1,243]},{2:[1,246],17:[1,245]},{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,247],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V7,[2,15]),{2:$VY,10:186,11:189,12:$VZ,16:12,18:248,19:[1,249],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{2:$VY,10:186,11:189,12:$VZ,16:12,18:250,19:[1,251],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o([14,15,23,25,28,94],[2,130],{69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM}),{14:[1,252],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($VX,[2,90]),{27:[1,253]},{25:$VS,28:[1,254]},o($VX,[2,91]),o($V7,[2,10]),o($V81,[2,26]),o($V81,[2,33]),o($V81,[2,36]),o($V81,[2,37]),o($V81,[2,38]),{23:[1,255],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($V81,[2,41]),o($V81,[2,40]),{12:$Ve,13:$Vf,14:[1,257],33:52,38:256,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{23:[1,258]},{12:$Ve,13:$Vf,14:[1,260],33:52,38:259,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{23:[1,261]},{19:[1,262]},{12:$Ve,13:$Vf,33:52,38:263,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{12:$Ve,13:$Vf,33:52,38:264,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{19:[1,265]},{12:$Ve,13:$Vf,33:52,38:266,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{19:[1,267]},{10:268,12:[1,270],16:269,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6},{19:[1,271]},{2:$VY,10:186,11:189,12:$VZ,16:12,18:272,19:[1,273],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{23:[1,274]},o($V7,[2,14]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,275],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V7,[2,13]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,276],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V7,[2,17]),o($VO,[2,122]),{12:$Ve,13:$Vf,33:52,38:277,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{23:[1,278]},o($V81,[2,39]),{14:[1,279],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{23:[1,280]},o($V81,[2,140]),{14:[1,281],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{23:[1,282]},o($V81,[2,143]),o($V81,[2,62]),{14:[1,283],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{14:[1,284],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($V81,[2,74]),{14:[1,285],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($V81,[2,47]),{12:$Ve,13:$Vf,33:52,38:286,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{2:$Vc,12:[1,287]},{46:$V9,47:$Va,48:$Vb},o($V81,[2,50]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,288],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{43:[1,289]},o($V81,[2,56]),o($V7,[2,12]),o($V7,[2,16]),{28:[1,290],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($VX,[2,89]),{23:[1,291]},o($V81,[2,139]),{23:[1,292]},o($V81,[2,142]),{17:[1,293]},{17:[1,294]},{17:[1,295]},{23:[1,296],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{23:$Vw,46:$Vx},{43:[1,297]},{13:[1,298]},{23:[1,299]},o($V81,[2,138]),o($V81,[2,141]),{2:$VY,10:186,11:189,12:$VZ,16:12,18:300,19:[1,301],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{58:302,59:303,60:[1,304],61:$V91},{2:$VY,10:186,11:189,12:$VZ,16:12,18:306,19:[1,307],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{12:[1,309],45:308},{13:[1,310]},{12:$Ve,13:$Vf,33:52,38:311,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($VX,[2,88]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,312],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,64],{56:[1,313]}),{19:[1,315],59:314,60:[1,316],61:$V91},{19:[1,317]},{2:[1,319],12:$Ve,13:$Vf,33:52,38:318,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{15:[1,320]},{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,321],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,46]),{14:[1,322]},{46:[1,323],47:[1,324],48:[1,325]},{12:$Ve,13:$Vf,33:52,38:326,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{14:[1,327],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($V81,[2,63],{56:[1,328]}),{17:[1,329],50:330,52:206,53:207,54:208,55:$V41},{19:[1,331]},o($V81,[2,72]),{12:$Ve,13:$Vf,33:52,38:332,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},o($V81,[2,73]),{15:[1,333],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{15:[1,334]},{2:$VY,10:186,11:189,12:$VZ,16:12,18:335,19:[2,81],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,45]),{17:[1,336]},{12:$Ve,13:$Vf,33:52,38:337,70:$Vg,83:$Vh,84:$Vi,85:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:50,92:51,93:53,95:54,96:55,97:56,98:57,99:58,100:59,101:60,104:$Vp,105:$Vq,106:$Vr,107:$Vs,108:$Vt,109:$Vu,110:$Vv},{14:[2,52]},{14:[2,53]},{14:[1,338],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{23:[1,339]},{17:[1,340],50:341,52:206,53:207,54:208,55:$V41},{2:$VY,10:186,11:189,12:$VZ,16:12,18:342,19:[1,343],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,70]),o($V81,[2,71]),{15:[1,344],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},o($Va1,[2,78],{16:12,63:13,29:185,10:186,30:187,31:188,11:189,32:190,33:191,34:192,35:193,50:196,51:197,40:198,41:199,42:200,52:206,53:207,54:208,18:345,2:$VY,12:$VZ,36:$V_,37:$V$,39:$V01,43:$V11,44:$V21,49:$V31,55:$V41,57:$V51,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71}),o($Va1,[2,79]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[2,80],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{2:$VY,10:186,11:189,12:$VZ,16:12,18:346,19:[1,347],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},{14:[2,51],69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,94:$VN},{23:[1,348]},o($V81,[2,55]),{2:$VY,10:186,11:189,12:$VZ,16:12,18:349,19:[1,350],29:185,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,69]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,351],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,68]),o($Va1,[2,76],{16:12,63:13,29:185,10:186,30:187,31:188,11:189,32:190,33:191,34:192,35:193,50:196,51:197,40:198,41:199,42:200,52:206,53:207,54:208,18:352,2:$VY,12:$VZ,36:$V_,37:$V$,39:$V01,43:$V11,44:$V21,49:$V31,55:$V41,57:$V51,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71}),o($Va1,[2,77],{16:12,63:13,10:186,30:187,31:188,11:189,32:190,33:191,34:192,35:193,50:196,51:197,40:198,41:199,42:200,52:206,53:207,54:208,29:225,2:$VY,12:$VZ,36:$V_,37:$V$,39:$V01,43:$V11,44:$V21,49:$V31,55:$V41,57:$V51,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71}),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,353],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,49]),o($V81,[2,54]),{2:$VY,10:186,11:189,12:$VZ,16:12,19:[1,354],29:225,30:187,31:188,32:190,33:191,34:192,35:193,36:$V_,37:$V$,39:$V01,40:198,41:199,42:200,43:$V11,44:$V21,49:$V31,50:196,51:197,52:206,53:207,54:208,55:$V41,57:$V51,63:13,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71},o($V81,[2,67]),o($V81,[2,66]),o($Va1,[2,75],{16:12,63:13,10:186,30:187,31:188,11:189,32:190,33:191,34:192,35:193,50:196,51:197,40:198,41:199,42:200,52:206,53:207,54:208,29:225,2:$VY,12:$VZ,36:$V_,37:$V$,39:$V01,43:$V11,44:$V21,49:$V31,55:$V41,57:$V51,64:$V2,65:$V3,66:$V4,67:$V5,68:$V6,102:$V61,103:$V71}),o($V81,[2,48]),o($V81,[2,65])],
defaultActions: {19:[2,1],21:[2,2],324:[2,52],325:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var cadena = '';
	var errors = [];

	const TIPO_OPERACION	= require('./Controller/Principales/TOperaciones');
	const TIPO_VALOR 		= require('./Controller/Principales/TValores');
	const TIPO_DATO			= require('./Controller/Principales/Tipos');
	const INSTRUCCION		= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentario de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 66
break;
case 4:return 65
break;
case 5:return 68
break;
case 6:return 67
break;
case 7:return 64
break;
case 8:return 62
break;
case 9:return 55
break;
case 10:return 56
break;
case 11:return 57
break;
case 12:return 60
break;
case 13:return 36
break;
case 14:return 43
break;
case 15:return 44
break;
case 16:return 49
break;
case 17:return 61
break;
case 18:return 39
break;
case 19:return 37
break;
case 20:return 21
break;
case 21:return 47
break;
case 22:return 48
break;
case 23:return 102
break;
case 24:return 103
break;
case 25:return 104
break;
case 26:return 105
break;
case 27:return 106
break;
case 28:return 107
break;
case 29:return 108
break;
case 30:return 109
break;
case 31:return 110
break;
case 32:return 22
break;
case 33:return 86
break;
case 34:return 87
break;
case 35:return 81
break;
case 36:return 82
break;
case 37:return 76
break;
case 38:return 75
break;
case 39:return 83
break;
case 40:return 46
break;
case 41:return 78
break;
case 42:return 80
break;
case 43:return 79
break;
case 44:return 77
break;
case 45:return 25
break;
case 46:return 23
break;
case 47:return 15
break;
case 48:return 17
break;
case 49:return 19
break;
case 50:return 71
break;
case 51:return 72
break;
case 52:return 70
break;
case 53:return 69
break;
case 54:return 73
break;
case 55:return 74
break;
case 56:return 13
break;
case 57:return 14
break;
case 58:return 94
break;
case 59:return 27
break;
case 60:return 28
break;
case 61:return 12
break;
case 62:return 85
break;
case 63:return 89
break;
case 64:return 88
break;
case 65: cadena = ''; this.begin("string"); 
break;
case 66: cadena += yy_.yytext; 
break;
case 67: cadena += "\""; 
break;
case 68: cadena += "\n"; 
break;
case 69: cadena += " ";  
break;
case 70: cadena += "\t"; 
break;
case 71: cadena += "\\"; 
break;
case 72: cadena += "\'"; 
break;
case 73: cadena += "\r"; 
break;
case 74: yy_.yytext = cadena; this.popState(); return 84; 
break;
case 75:return 5
break;
case 76: errors.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[66,67,68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}