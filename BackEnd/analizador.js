/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,13],$V2=[1,10],$V3=[1,11],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[5,7,14,21,22,67,68,69,70,71],$Va=[1,28],$Vb=[1,27],$Vc=[1,33],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[2,14,16,29],$Vh=[1,53],$Vi=[1,44],$Vj=[1,43],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[2,5,7,14,15,19,21,22,38,39,41,45,46,51,57,59,62,64,67,68,69,70,71,73,86,87,88,89,90,91,92,93,105,106,107,108,109,110,111,112,113],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,97,105,106],$VQ=[1,108],$VR=[16,27],$VS=[1,123],$VT=[16,27,30],$VU=[2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,84,85,97,105,106],$VV=[1,167],$VW=[1,168],$VX=[1,174],$VY=[1,175],$VZ=[1,176],$V_=[1,184],$V$=[1,185],$V01=[1,186],$V11=[1,182],$V21=[1,183],$V31=[1,177],$V41=[1,178],$V51=[2,5,7,14,19,21,22,38,39,41,45,46,51,57,59,62,64,67,68,69,70,71,105,106],$V61=[2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,72,73,78,79,80,81,82,83,84,85,97,105,106],$V71=[2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,97,105,106],$V81=[2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,78,79,80,81,82,83,84,85,97,105,106],$V91=[2,14,19,38,39,41,45,46,51,57,59,62,64,67,68,69,70,71,105,106],$Va1=[1,289],$Vb1=[19,62,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"ENTRADA":4,"EOF":5,"ENTCERO":6,"FUNCIONBODY":7,"METODOBODY":8,"MAINBODY":9,"DEC_VAR":10,"DEC_VECT":11,"FUCTIONBODY":12,"TIPO":13,"IDENTIFICADOR":14,"PARENTESIS_ABRE":15,"PARENTESIS_CIERRA":16,"LlaveAbre":17,"INSTRUCCION":18,"LlaveCierra":19,"LISTAPARAMETROS":20,"TK_VOID":21,"TK_MAIN":22,"TK_PYC":23,"LISTAVALORES":24,"RUNBODY":25,"TK_RUN":26,"COMA":27,"PARAMETROS":28,"COR_ABRE":29,"COR_CIERRA":30,"INSCERO":31,"SENTENCIACONTROL":32,"SENTENCIACICLO":33,"SENTENCIATRANSFERENCIA":34,"LLAMADA":35,"FPRINTLN":36,"FPRINT":37,"TK_BREAK":38,"TK_RETURN":39,"EXPRESION":40,"TK_CONTINUE":41,"WHILE":42,"FOR":43,"DOWHILE":44,"TK_WHILE":45,"TK_FOR":46,"ACTUALIZACION":47,"IGUAL":48,"INCREMENTO":49,"DECREMENTO":50,"TK_DO":51,"CONTROLIF":52,"SWITCH":53,"IF":54,"IFELSE":55,"ELSEIF":56,"TK_IF":57,"TK_ELSE":58,"TK_SWITCH":59,"CASESLIST":60,"DEFAULT":61,"TK_CASE":62,"DOSPUNTS":63,"TK_DEFAULT":64,"NEW":65,"TIPODATO":66,"STRING":67,"INTEGER":68,"DOUBLE":69,"CHAR":70,"BOOLEAN":71,"OP_SUMA":72,"OP_MENOS":73,"OP_MULTIPLICACION":74,"OP_DIVISION":75,"OP_EXPONENTE":76,"OP_MODULO":77,"IGUALIGUAL":78,"DIFERENTEA":79,"MENOR":80,"MENORIGUAL":81,"MAYOR":82,"MAYORIGUAL":83,"OR":84,"AND":85,"NOT":86,"CADENA":87,"CARACTER":88,"TRUE":89,"FALSE":90,"ENTERO":91,"DECI":92,"GETVALUE":93,"CASTEO":94,"TERNARIO":95,"FUNCIONESRESERVADAS":96,"OP_TERNARIO":97,"FTOLOWER":98,"FTOUPPER":99,"FLENGTH":100,"FROUND":101,"FTYPEOF":102,"FTOSTRING":103,"FTOCHARARRAY":104,"PRINTLN":105,"PRINT":106,"TK_TOLOWER":107,"TK_TOUPPER":108,"TK_LENGTH":109,"TK_ROUND":110,"TK_TYPEOF":111,"TK_TOSTRING":112,"TK_TOCHARARRAY":113,"VALORES":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FUNCIONBODY",14:"IDENTIFICADOR",15:"PARENTESIS_ABRE",16:"PARENTESIS_CIERRA",17:"LlaveAbre",19:"LlaveCierra",21:"TK_VOID",22:"TK_MAIN",23:"TK_PYC",26:"TK_RUN",27:"COMA",29:"COR_ABRE",30:"COR_CIERRA",38:"TK_BREAK",39:"TK_RETURN",41:"TK_CONTINUE",45:"TK_WHILE",46:"TK_FOR",48:"IGUAL",49:"INCREMENTO",50:"DECREMENTO",51:"TK_DO",57:"TK_IF",58:"TK_ELSE",59:"TK_SWITCH",62:"TK_CASE",63:"DOSPUNTS",64:"TK_DEFAULT",65:"NEW",67:"STRING",68:"INTEGER",69:"DOUBLE",70:"CHAR",71:"BOOLEAN",72:"OP_SUMA",73:"OP_MENOS",74:"OP_MULTIPLICACION",75:"OP_DIVISION",76:"OP_EXPONENTE",77:"OP_MODULO",78:"IGUALIGUAL",79:"DIFERENTEA",80:"MENOR",81:"MENORIGUAL",82:"MAYOR",83:"MAYORIGUAL",84:"OR",85:"AND",86:"NOT",87:"CADENA",88:"CARACTER",89:"TRUE",90:"FALSE",91:"ENTERO",92:"DECI",93:"GETVALUE",97:"OP_TERNARIO",105:"PRINTLN",106:"PRINT",107:"TK_TOLOWER",108:"TK_TOUPPER",109:"TK_LENGTH",110:"TK_ROUND",111:"TK_TYPEOF",112:"TK_TOSTRING",113:"TK_TOCHARARRAY"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[12,7],[12,6],[12,8],[12,7],[8,7],[8,6],[8,8],[8,7],[8,3],[9,5],[9,6],[9,3],[25,5],[25,6],[25,3],[20,3],[20,1],[28,4],[28,2],[18,2],[18,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,1],[31,1],[31,2],[31,2],[34,2],[34,3],[34,2],[34,2],[33,1],[33,1],[33,1],[42,7],[42,6],[42,3],[43,10],[43,9],[43,3],[47,3],[47,2],[47,2],[44,9],[44,8],[44,3],[32,1],[32,1],[52,1],[52,1],[52,1],[52,3],[54,7],[54,6],[55,11],[55,10],[55,10],[55,9],[56,9],[56,8],[53,8],[53,7],[53,7],[53,3],[60,5],[60,4],[60,4],[60,3],[60,3],[61,3],[61,2],[10,5],[10,3],[10,4],[10,3],[10,3],[10,3],[11,11],[11,9],[11,6],[11,7],[11,5],[13,1],[66,1],[66,1],[66,1],[66,1],[66,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,6],[40,4],[40,1],[40,1],[40,1],[40,1],[40,1],[94,4],[95,5],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[36,5],[36,4],[36,3],[37,5],[37,4],[37,3],[98,4],[99,4],[100,4],[101,4],[102,4],[103,4],[104,4],[35,4],[35,3],[24,3],[24,1],[114,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 retorno = { parse: $$[$0-1], errors: errors }; errors = []; return retorno; 
break;
case 2:
 retorno = { parse: null, errors: errors }; errors = []; return retorno; 
break;
case 3: case 29:
 if($$[$0]!=="") $$[$0-1].push($$[$0]); this.$=$$[$0-1]; 
break;
case 4:
if($$[$0]!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 5: case 6: case 7: case 8: case 9: case 31: case 32: case 33: case 34: case 35: case 37: case 38: case 45: case 46: case 47: case 60: case 61: case 62: case 63: case 64: case 128: case 129: case 130: case 131: case 134: case 135: case 136: case 137: case 138: case 139: case 140: case 158:
this.$=$$[$0]
break;
case 10:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], null, $$[$0-1], $$[$0-6], this._$.first_line, this._$.first_column+1) 
break;
case 11:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-4], null, [], $$[$0-5], this._$.first_line, this._$.first_column+1) 
break;
case 12:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-6], $$[$0-4], $$[$0-1], $$[$0-7], this._$.first_line, this._$.first_column+1) 
break;
case 13:
 this.$ = INSTRUCCION.nuevaFuncion($$[$0-5], $$[$0-3], [], $$[$0-6], this._$.first_line, this._$.first_column+1) 
break;
case 14:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], [], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 15:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-4], [], [], this._$.first_line, this._$.first_column+1) 
break;
case 16:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 17:
 this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], $$[$0-3], [], this._$.first_line, this._$.first_column+1) 
break;
case 18:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de método/Función no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 19: case 22:
this.$ = INSTRUCCION.nuevoRun($$[$0-3], null, this._$.first_line, this._$.first_column+1)
break;
case 20: case 23:
this.$ = INSTRUCCION.nuevoRun($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column+1)
break;
case 21: case 24:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Llamada de Run no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 25: case 156:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 26: case 157:
this.$=[$$[$0]];
break;
case 27:
this.$ = INSTRUCCION.nuevoParametro($$[$0-2], {vector: $$[$0-3]}, this._$.first_line, this._$.first_column+1)
break;
case 28:
this.$ = INSTRUCCION.nuevoParametro($$[$0], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 30:
 if($$[$0]!=="") this.$=[$$[$0]]; else this.$=[]; 
break;
case 36: case 109:
this.$=$$[$0-1]
break;
case 39: case 40:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de instrucción no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 41:
 this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line, this._$.first_column+1) 
break;
case 42:
 this.$ = new INSTRUCCION.nuevoReturn($$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 43:
 this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line, this._$.first_column+1) 
break;
case 44:
 this.$ = new INSTRUCCION.nuevoReturn(null, this._$.first_line, this._$.first_column+1) 
break;
case 48:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 49:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-3], [], this._$.first_line,this._$.first_column+1)
break;
case 50:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de ciclo While no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 51:
$$[$0-1].push($$[$0-4]); this.$ = new INSTRUCCION.nuevoFor($$[$0-7], $$[$0-6], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 52:
 this.$ = new INSTRUCCION.nuevoFor($$[$0-6], $$[$0-5], [$$[$0-3]], this._$.first_line,this._$.first_column+1)
break;
case 53:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de ciclo For no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 54:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line,this._$.first_column+1)
break;
case 55:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },  			tipo: 'SUMA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 56:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-1], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
				tipo: 'RESTA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 57:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6], this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-1], [], this._$.first_line,this._$.first_column+1)
break;
case 59:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de sentencia Do-While no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 65:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de sentencia If no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 66:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 67:
 this.$ = new INSTRUCCION.nuevoIf($$[$0-3], [], this._$.first_line,this._$.first_column+1) 
break;
case 68:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 69:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-7], [], $$[$0-1], this._$.first_line,this._$.first_column+1) 
break;
case 70:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-7], $$[$0-4], [], this._$.first_line,this._$.first_column+1) 
break;
case 71:
 this.$ = new INSTRUCCION.nuevoIfElse($$[$0-6], [], [], this._$.first_line,this._$.first_column+1) 
break;
case 72:
 this.$ = new INSTRUCCION.nuevoElseIf($$[$0-6], $$[$0-3], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 73:
 this.$ = new INSTRUCCION.nuevoElseIf($$[$0-5], [], $$[$0], this._$.first_line,this._$.first_column+1); 
break;
case 74:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-5], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 75:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-4], $$[$0-1], null, this._$.first_line, this._$.first_column+1); 
break;
case 76:
 this.$ = new INSTRUCCION.nuevoSwitch($$[$0-4], null, $$[$0-1], this._$.first_line, this._$.first_column+1); 
break;
case 77:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de sentencia Swtich no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 78:
 $$[$0-4].push(new INSTRUCCION.nuevoCaso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-4]; 
break;
case 79:
 $$[$0-3].push(new INSTRUCCION.nuevoCaso($$[$0-1], [], this._$.first_line, this._$.first_column+1)); this.$=$$[$0-3]; 
break;
case 80:
 this.$ = [new INSTRUCCION.nuevoCaso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1)]; 
break;
case 81:
 this.$ = [new INSTRUCCION.nuevoCaso($$[$0-1], [], this._$.first_line, this._$.first_column+1)]; 
break;
case 82:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de caso no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 83:
 this.$ = new INSTRUCCION.nuevoCaso(null, $$[$0], this._$.first_line, this._$.first_column+1); 
break;
case 84:
 this.$ = new INSTRUCCION.nuevoCaso(null, [], this._$.first_line, this._$.first_column+1); 
break;
case 85:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 86:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 87:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 88:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
				tipo: 'SUMA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 89:

			this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2],
			{ opIzq: { tipo: 'VAL_IDENTIFICADOR', valor: $$[$0-2], linea: this._$.first_line, columna: this._$.first_column+1 },
				opDer: { tipo: 'VAL_ENTERO', valor: 1, linea: this._$.first_line, columna: this._$.first_column+1 },
				tipo: 'RESTA',
				linea: this._$.first_line,
				columna: this._$.first_column+1 }, this._$.first_line,this._$.first_column+1)
			
break;
case 90:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de variable no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 91:
 this.$ = INSTRUCCION.nuevoVector($$[$0-10], $$[$0-4], $$[$0-7], $$[$0-2], null, null, this._$.first_line, this._$.first_column+1) 
break;
case 92:
 this.$ = INSTRUCCION.nuevoVector($$[$0-8], null, $$[$0-5], null, $$[$0-2], null, this._$.first_line, this._$.first_column+1) 
break;
case 93:
 this.$ = INSTRUCCION.modificacionVector($$[$0-5], $$[$0-3], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 94:
 this.$ = INSTRUCCION.nuevoVector($$[$0-3], null, $$[$0-6], null, null, $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 95:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Declaración de vector no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 96:
this.$ = $$[$0]
break;
case 97:
this.$ = TIPO_DATO.CADENA
break;
case 98:
this.$ = TIPO_DATO.ENTERO
break;
case 99:
this.$ = TIPO_DATO.DOBLE
break;
case 100:
this.$ = TIPO_DATO.CARACTER
break;
case 101:
this.$ = TIPO_DATO.BOOLEANO
break;
case 102:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 103:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 104:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 105:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 106:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 107:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 108:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 110:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 111:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 112:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 113:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 114:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 115:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 116:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 117:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 118:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 119:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 120:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim().substring(1, $$[$0].length - 1), TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 121: case 122:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.BOOLEANO, this._$.first_line,this._$.first_column+1)
break;
case 123:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
break;
case 124:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0].trim()), TIPO_VALOR.DOBLE, this._$.first_line,this._$.first_column+1)
break;
case 125:
 this.$ = INSTRUCCION.accesoLista($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 126:
 this.$ = INSTRUCCION.accesoVector($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1) 
break;
case 127:
this.$ = INSTRUCCION.nuevoValor($$[$0].trim(), TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 132:
 this.$ = new INSTRUCCION.nuevoCasteo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 133:
 this.$ = new INSTRUCCION.nuevoTernario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column+1) 
break;
case 141:
this.$ = new INSTRUCCION.nuevoImprimirLn($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 142:
this.$ = new INSTRUCCION.nuevoImprimirLn(INSTRUCCION.nuevoValor("", TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1), this._$.first_line,this._$.first_column+1)
break;
case 143:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Llamada a función println no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 144:
this.$ = new INSTRUCCION.nuevoImprimir($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 145:
this.$ = new INSTRUCCION.nuevoImprimir(INSTRUCCION.nuevoValor("", TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1), this._$.first_line,this._$.first_column+1)
break;
case 146:
 this.$ = ""; errors.push({ tipo: "Sintáctico", error: "Llamada a función print no válida.", linea: this._$.first_line, columna: this._$.first_column+1 }); 
break;
case 147:
this.$ = new INSTRUCCION.toLower($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 148:
this.$ = new INSTRUCCION.toUpper($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 149:
this.$ = new INSTRUCCION.nuevoLength($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 150:
this.$ = new INSTRUCCION.nuevoRound($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 151:
this.$ = new INSTRUCCION.nuevoTypeOf($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 152:
this.$ = new INSTRUCCION.nuevoToString($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 153:
this.$ = new INSTRUCCION.nuevoToCharArray($$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 154:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 155:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-2], [], this._$.first_line, this._$.first_column+1)
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,8:6,9:7,10:8,11:9,13:12,14:$V1,21:$V2,22:$V3,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{1:[3]},{5:[1,20],6:21,7:$V0,8:6,9:7,10:8,11:9,13:12,14:$V1,21:$V2,22:$V3,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{5:[1,22]},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),{2:[1,24],14:[1,23]},{2:[1,26],14:[1,25]},{2:$Va,14:$Vb,29:[1,29]},{29:$Vc,48:$Vd,49:$Ve,50:$Vf},o($Vg,[2,96]),o($Vg,[2,97]),o($Vg,[2,98]),o($Vg,[2,99]),o($Vg,[2,100]),o($Vg,[2,101]),{1:[2,1]},o($V9,[2,3]),{1:[2,2]},{15:[1,34]},{19:[1,35]},{15:[1,36]},{23:[1,37]},{23:[1,39],48:[1,38]},{23:[1,40]},{30:[1,41]},{14:$Vh,15:$Vi,35:56,40:42,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{23:[1,72]},{23:[1,73]},{14:$Vh,15:$Vi,35:56,40:74,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:78,16:[1,75],20:76,28:77,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V9,[2,18]),{14:$Vh,15:$Vi,16:[1,79],24:80,35:56,40:82,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy,114:81},o($V9,[2,21]),{14:$Vh,15:$Vi,35:56,40:83,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($Vz,[2,86]),o($Vz,[2,90]),{2:[1,85],14:[1,84]},{23:[1,86],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{14:$Vh,15:$Vi,35:56,40:102,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{13:104,14:$Vh,15:$Vi,35:56,40:103,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:105,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VP,[2,119]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,122]),o($VP,[2,123]),o($VP,[2,124]),{15:[1,106]},o($VP,[2,127],{15:$VQ,29:[1,107]}),o($VP,[2,128]),o($VP,[2,129]),o($VP,[2,130]),o($VP,[2,131]),o($VP,[2,134]),o($VP,[2,135]),o($VP,[2,136]),o($VP,[2,137]),o($VP,[2,138]),o($VP,[2,139]),o($VP,[2,140]),{15:[1,109]},{15:[1,110]},{15:[1,111]},{15:[1,112]},{15:[1,113]},{15:[1,114]},{15:[1,115]},o($Vz,[2,88]),o($Vz,[2,89]),{30:[1,116],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{17:[1,117]},{16:[1,118],27:[1,119]},o($VR,[2,26]),{14:[1,120]},{23:[1,121]},{16:[1,122],27:$VS},o($VT,[2,157]),o($VT,[2,158],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO}),{23:[1,124],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{48:[1,125]},{23:[1,126]},o($Vz,[2,87]),{14:$Vh,15:$Vi,35:56,40:127,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:128,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:129,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:130,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:131,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:132,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:133,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:134,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:135,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:136,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:137,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:138,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:139,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:140,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:141,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VP,[2,108]),{16:[1,142],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,143]},o($VU,[2,118],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),{14:[1,144]},{14:$Vh,15:$Vi,35:56,40:145,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,16:[1,147],24:146,35:56,40:82,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy,114:81},{14:$Vh,15:$Vi,35:56,40:148,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:149,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:150,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:151,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:152,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:153,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:154,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{48:[1,155]},{2:$VV,10:159,11:162,13:12,14:$VW,18:156,19:[1,157],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{17:[1,187]},{13:78,28:188,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($VR,[2,28],{29:[1,189]}),o($V9,[2,19]),{23:[1,190]},{14:$Vh,15:$Vi,35:56,40:82,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy,114:191},o($Vz,[2,85]),{14:$Vh,15:$Vi,29:[1,193],35:56,40:194,65:[1,192],73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V51,[2,95]),o($V61,[2,102],{74:$VC,75:$VD,76:$VE,77:$VF}),o($V61,[2,103],{74:$VC,75:$VD,76:$VE,77:$VF}),o($V71,[2,104],{76:$VE}),o($V71,[2,105],{76:$VE}),o($VP,[2,106]),o($V71,[2,107],{76:$VE}),o($V81,[2,110],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,111],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,112],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,113],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,114],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,115],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o([2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,84,97,105,106],[2,116],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,85:$VN}),o($VU,[2,117],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),{63:[1,195],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($VP,[2,109]),{14:$Vh,15:$Vi,35:56,40:196,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{27:[1,197]},{30:[1,198],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,199],27:$VS},o($VP,[2,155]),{16:[1,200],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,201],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,202],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,203],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,204],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,205],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,206],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{14:$Vh,15:$Vi,35:56,40:207,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,208],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V9,[2,15]),o($V91,[2,30]),o($V91,[2,31]),o($V91,[2,32]),o($V91,[2,33]),o($V91,[2,34]),o($V91,[2,35]),{23:[1,210]},o($V91,[2,37]),o($V91,[2,38]),{19:[1,212],23:[1,211]},{15:$VQ,29:$Vc,48:$Vd,49:$Ve,50:$Vf},o($V91,[2,60]),o($V91,[2,61]),o($V91,[2,45]),o($V91,[2,46]),o($V91,[2,47]),{23:[1,213]},{14:$Vh,15:$Vi,23:[1,215],35:56,40:214,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{23:[1,216]},{2:[1,218],15:[1,217]},{2:[1,220],15:[1,219]},o($V91,[2,62]),o($V91,[2,63]),o($V91,[2,64]),{2:[1,221],15:[1,222]},{2:[1,224],15:[1,223]},{2:[1,226],15:[1,225]},{2:[1,228],15:[1,227]},{2:[1,230],17:[1,229]},{2:$VV,10:159,11:162,13:12,14:$VW,18:231,19:[1,232],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($VR,[2,25]),{30:[1,233]},o($V9,[2,20]),o($VT,[2,156]),{13:234,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{14:$Vh,15:$Vi,24:235,35:56,40:82,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy,114:81},{23:[1,236],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{14:$Vh,15:$Vi,35:56,40:237,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VP,[2,132]),{14:$Vh,15:$Vi,35:56,40:238,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($VP,[2,126]),o($VP,[2,154]),o($VP,[2,147]),o($VP,[2,148]),o($VP,[2,149]),o($VP,[2,150]),o($VP,[2,151]),o($VP,[2,152]),o($VP,[2,153]),o($V51,[2,93],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO}),o($V9,[2,14]),o($V91,[2,29]),o($V91,[2,36]),o($V91,[2,39]),o($V91,[2,40]),o($V91,[2,41]),{23:[1,239],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($V91,[2,44]),o($V91,[2,43]),{14:$Vh,15:$Vi,16:[1,241],35:56,40:240,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{23:[1,242]},{14:$Vh,15:$Vi,16:[1,244],35:56,40:243,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{23:[1,245]},{19:[1,246]},{14:$Vh,15:$Vi,35:56,40:247,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{14:$Vh,15:$Vi,35:56,40:248,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{19:[1,249]},{14:$Vh,15:$Vi,35:56,40:250,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{19:[1,251]},{10:252,13:253,14:[1,254],66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},{19:[1,255]},{2:$VV,10:159,11:162,13:12,14:$VW,18:256,19:[1,257],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{23:[1,258]},{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,259],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V9,[2,17]),o($VR,[2,27]),{29:[1,260]},{27:$VS,30:[1,261]},o($V51,[2,94]),o([2,5,7,14,16,19,21,22,23,27,30,38,39,41,45,46,51,57,59,62,63,64,67,68,69,70,71,97,105,106],[2,133],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),{16:[1,262],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($V91,[2,42]),{16:[1,263],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{23:[1,264]},o($V91,[2,143]),{16:[1,265],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{23:[1,266]},o($V91,[2,146]),o($V91,[2,65]),{16:[1,267],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{16:[1,268],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($V91,[2,77]),{16:[1,269],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($V91,[2,50]),{14:$Vh,15:$Vi,35:56,40:270,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{2:$Va,14:$Vb},{48:$Vd,49:$Ve,50:$Vf},o($V91,[2,53]),{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,271],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{45:[1,272]},o($V91,[2,59]),o($V9,[2,16]),{14:$Vh,15:$Vi,35:56,40:273,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{23:[1,274]},o($VP,[2,125]),{23:[1,275]},o($V91,[2,142]),{23:[1,276]},o($V91,[2,145]),{17:[1,277]},{17:[1,278]},{17:[1,279]},{23:[1,280],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{45:[1,281]},{15:[1,282]},{30:[1,283],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($V51,[2,92]),o($V91,[2,141]),o($V91,[2,144]),{2:$VV,10:159,11:162,13:12,14:$VW,18:284,19:[1,285],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{60:286,61:287,62:[1,288],64:$Va1},{2:$VV,10:159,11:162,13:12,14:$VW,18:290,19:[1,291],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{14:[1,293],47:292},{15:[1,294]},{14:$Vh,15:$Vi,35:56,40:295,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{23:[1,296]},{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,297],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,67],{58:[1,298]}),{19:[1,300],61:299,62:[1,301],64:$Va1},{19:[1,302]},{2:[1,304],14:$Vh,15:$Vi,35:56,40:303,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{63:[1,305]},{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,306],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,49]),{16:[1,307]},{48:[1,308],49:[1,309],50:[1,310]},{14:$Vh,15:$Vi,35:56,40:311,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{16:[1,312],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($V51,[2,91]),o($V91,[2,66],{58:[1,313]}),{17:[1,314],52:315,54:179,55:180,56:181,57:$V11},{19:[1,316]},o($V91,[2,75]),{14:$Vh,15:$Vi,35:56,40:317,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},o($V91,[2,76]),{63:[1,318],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{63:[1,319]},{2:$VV,10:159,11:162,13:12,14:$VW,18:320,19:[2,84],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,48]),{17:[1,321]},{14:$Vh,15:$Vi,35:56,40:322,73:$Vj,86:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp,92:$Vq,93:$Vr,94:54,95:55,96:57,98:58,99:59,100:60,101:61,102:62,103:63,104:64,107:$Vs,108:$Vt,109:$Vu,110:$Vv,111:$Vw,112:$Vx,113:$Vy},{16:[2,55]},{16:[2,56]},{16:[1,323],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{23:[1,324]},{17:[1,325],52:326,54:179,55:180,56:181,57:$V11},{2:$VV,10:159,11:162,13:12,14:$VW,18:327,19:[1,328],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,73]),o($V91,[2,74]),{63:[1,329],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},o($Vb1,[2,81],{13:12,66:14,31:158,10:159,32:160,33:161,11:162,34:163,35:164,36:165,37:166,52:169,53:170,42:171,43:172,44:173,54:179,55:180,56:181,18:330,2:$VV,14:$VW,38:$VX,39:$VY,41:$VZ,45:$V_,46:$V$,51:$V01,57:$V11,59:$V21,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41}),o($Vb1,[2,82]),{2:$VV,10:159,11:162,13:12,14:$VW,19:[2,83],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{2:$VV,10:159,11:162,13:12,14:$VW,18:331,19:[1,332],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},{16:[2,54],72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,97:$VO},{23:[1,333]},o($V91,[2,58]),{2:$VV,10:159,11:162,13:12,14:$VW,18:334,19:[1,335],31:158,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,72]),{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,336],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,71]),o($Vb1,[2,79],{13:12,66:14,31:158,10:159,32:160,33:161,11:162,34:163,35:164,36:165,37:166,52:169,53:170,42:171,43:172,44:173,54:179,55:180,56:181,18:337,2:$VV,14:$VW,38:$VX,39:$VY,41:$VZ,45:$V_,46:$V$,51:$V01,57:$V11,59:$V21,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41}),o($Vb1,[2,80],{13:12,66:14,10:159,32:160,33:161,11:162,34:163,35:164,36:165,37:166,52:169,53:170,42:171,43:172,44:173,54:179,55:180,56:181,31:209,2:$VV,14:$VW,38:$VX,39:$VY,41:$VZ,45:$V_,46:$V$,51:$V01,57:$V11,59:$V21,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41}),{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,338],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,52]),o($V91,[2,57]),{2:$VV,10:159,11:162,13:12,14:$VW,19:[1,339],31:209,32:160,33:161,34:163,35:164,36:165,37:166,38:$VX,39:$VY,41:$VZ,42:171,43:172,44:173,45:$V_,46:$V$,51:$V01,52:169,53:170,54:179,55:180,56:181,57:$V11,59:$V21,66:14,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41},o($V91,[2,70]),o($V91,[2,69]),o($Vb1,[2,78],{13:12,66:14,10:159,32:160,33:161,11:162,34:163,35:164,36:165,37:166,52:169,53:170,42:171,43:172,44:173,54:179,55:180,56:181,31:209,2:$VV,14:$VW,38:$VX,39:$VY,41:$VZ,45:$V_,46:$V$,51:$V01,57:$V11,59:$V21,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,105:$V31,106:$V41}),o($V91,[2,51]),o($V91,[2,68])],
defaultActions: {20:[2,1],22:[2,2],309:[2,55],310:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var cadena = '';
	var errors = [];

	const TIPO_OPERACION	= require('./Controller/Principales/TOperaciones');
	const TIPO_VALOR 		= require('./Controller/Principales/TValores');
	const TIPO_DATO			= require('./Controller/Principales/Tipos');
	const INSTRUCCION		= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios en blanco
break;
case 1:// Comentario de una linea
break;
case 2:// Comentario Multilinea
break;
case 3:return 69
break;
case 4:return 68
break;
case 5:return 71
break;
case 6:return 70
break;
case 7:return 67
break;
case 8:return 65
break;
case 9:return 57
break;
case 10:return 58
break;
case 11:return 59
break;
case 12:return 62
break;
case 13:return 38
break;
case 14:return 45
break;
case 15:return 46
break;
case 16:return 51
break;
case 17:return 64
break;
case 18:return 41
break;
case 19:return 39
break;
case 20:return 21
break;
case 21:return 49
break;
case 22:return 50
break;
case 23:return 105
break;
case 24:return 106
break;
case 25:return 107
break;
case 26:return 108
break;
case 27:return 109
break;
case 28:return 110
break;
case 29:return 111
break;
case 30:return 112
break;
case 31:return 113
break;
case 32:return 26
break;
case 33:return 22
break;
case 34:return 89
break;
case 35:return 90
break;
case 36:return 84
break;
case 37:return 85
break;
case 38:return 79
break;
case 39:return 78
break;
case 40:return 86
break;
case 41:return 48
break;
case 42:return 81
break;
case 43:return 83
break;
case 44:return 82
break;
case 45:return 80
break;
case 46:return 27
break;
case 47:return 23
break;
case 48:return 63
break;
case 49:return 17
break;
case 50:return 19
break;
case 51:return 74
break;
case 52:return 75
break;
case 53:return 73
break;
case 54:return 72
break;
case 55:return 76
break;
case 56:return 77
break;
case 57:return 15
break;
case 58:return 16
break;
case 59:return 97
break;
case 60:return 29
break;
case 61:return 30
break;
case 62:return 14
break;
case 63:return 88
break;
case 64:return 92
break;
case 65:return 91
break;
case 66: cadena = ''; this.begin("string"); 
break;
case 67: cadena += yy_.yytext; 
break;
case 68: cadena += "\""; 
break;
case 69: cadena += "\n"; 
break;
case 70: cadena += " ";  
break;
case 71: cadena += "\t"; 
break;
case 72: cadena += "\\"; 
break;
case 73: cadena += "\'"; 
break;
case 74: cadena += "\r"; 
break;
case 75: yy_.yytext = cadena; this.popState(); return 87; 
break;
case 76:return 5
break;
case 77: errors.push({ tipo: "Léxico", error: yy_.yytext, linea: yy_.yylloc.first_line, columna: yy_.yylloc.first_column+1 }); return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:main\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:!)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:\\r)/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[67,68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}